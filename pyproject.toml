[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bpm"
version = "0.2.0"
description = "A 2D Beam Propagation Method (BPM) simulation library for integrated photonics"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Wentao Jiang", email = "jwt625@gmail.com"}
]
maintainers = [
    {name = "Wentao Jiang", email = "jwt625@gmail.com"}
]
keywords = ["photonics", "beam-propagation", "simulation", "optics", "waveguide"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.22.0",  # Required for trapezoid function
    "matplotlib>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
gui = [
    "gradio>=4.0.0",
    "plotly>=5.0.0",
]
test = [
    "pytest>=7.0.0",
    "plotly>=5.0.0",  # Required for test_mode_solver.py
]
examples = [
    "plotly>=5.0.0",  # Required for example_mmi.py
]
all = [
    "bpm[dev,gui,test,examples]",
]

[project.urls]
Homepage = "https://github.com/jwt625/BPM"
Repository = "https://github.com/jwt625/BPM"
Documentation = "https://github.com/jwt625/BPM#readme"
"Bug Tracker" = "https://github.com/jwt625/BPM/issues"
"Hugging Face Demo" = "https://huggingface.co/spaces/jwt625/BPM"

[project.scripts]
bpm-gui = "bpm.app:main"

[tool.hatch.build.targets.wheel]
packages = ["bpm"]

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "E741",  # ambiguous variable name (allow l, L for physics)
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["bpm"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "plotly.*",
    "gradio.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "numpy"
no_implicit_reexport = false

[tool.coverage.run]
source = ["bpm"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
